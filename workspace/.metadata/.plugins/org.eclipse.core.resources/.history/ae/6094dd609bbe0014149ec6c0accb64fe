package P2;

import java.util.HashMap;
import java.util.LinkedList;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;

/**
 * This class implements a queue of customers as a circular buffer.
 */
public class CustomerQueue {
	/**
	 * Creates a new customer queue.
	 * @param queueLength	The maximum length of the queue.
	 * @param gui			A reference to the GUI interface.
	 */
	
	//public BlockingQueue<Customer> queue;
	public int queueLength;
	public LinkedList<Customer> buffer;
	public boolean[] availPos;
	public HashMap positionMap;
	public Gui gui;
	
	
    public CustomerQueue(int queueLength, Gui gui) {
    	this.queueLength = queueLength;
    	this.buffer = new LinkedList<Customer>();
    	this.availPos = new boolean[queueLength];
    	this.positionMap = new HashMap<Customer, Integer>();
    	this.gui = gui;
	}


	public synchronized void addCustomer(){
		while(buffer.size() == queueLength){
			try {
				wait();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		Customer x = new Customer();
		buffer.add(x);
		int pos = findAvailSpot();
		positionMap.put(x, pos);
		System.out.println(positionMap);
		System.out.println(availPos);
		notifyAll();
	}
	
	public synchronized Customer getNextCustomer(){
		while(buffer.size() == 0){
			try {
				wait();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		Customer next = buffer.removeFirst();
		int pos = (int) positionMap.get(next);
		availPos[pos] = false;
		notifyAll();
		return next;
		
	}

	
	
	
	
	
	
//-------------------HELPER FUNCTIONS-----------------------
	
	public boolean notFull(LinkedList buffer, int queueLength){
		if (buffer.size() < queueLength){
			return true;
		}
		return false;
	}
	public boolean notEmpty(LinkedList buffer, int queueLength){
		if(buffer.isEmpty()){
			return false;
		}
		return true;
	}
	
	public int findAvailSpot(){
		for (int i = 0; i < availPos.length; i++) {
			if(availPos[i] == false);
			return i;
		}
		return -1;
	}
	
	public int generateSeatNumber(){
		return 0 + (int)(Math.random() * ((17 - 0) + 1));
	}
	
}
