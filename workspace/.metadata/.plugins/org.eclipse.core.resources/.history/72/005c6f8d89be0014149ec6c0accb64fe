package P2;

import java.util.HashMap;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;

/**
 * This class implements a queue of customers as a circular buffer.
 */
public class CustomerQueue {
	/**
	 * Creates a new customer queue.
	 * @param queueLength	The maximum length of the queue.
	 * @param gui			A reference to the GUI interface.
	 */
	
	//public BlockingQueue<Customer> queue;
	public int queueLength;
	public HashMap buffer;
	public boolean[] availSpots;
	
	
    public CustomerQueue(int queueLength, Gui gui) {
    	this.queueLength = queueLength;
    	this.buffer = new HashMap(queueLength);
    	this.availSpots = new boolean[queueLength];
	}


	public void addCustomer(Customer customer){
		
		
		
	}
	
	public Customer getNextCustomer() {
		return null;
	}
	
//-------------------HELPER FUNCTIONS-----------------------
	
	public boolean notFull(HashMap buffer, int queueLength){
		if (buffer.size() < queueLength){
			return true;
		}
		return false;
	}
	public boolean notEmpty(HashMap buffer, int queueLength){
		if(buffer.isEmpty()){
			return false;
		}
		return true;
	}
	
	public int availableSpot(boolean[] availSpots){
		for (int i = 0; i < availSpots.length; i++) {
			if(!availSpots[i]){
				return i;
			}
		}
		return -1;
		
	}
	
}
